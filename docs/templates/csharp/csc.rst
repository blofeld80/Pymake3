Template: `csc </src/pymake2/template/csharp/csc.py>`_
######################################################

What does the csc template do?
==============================
The csc template provides an interface to the Microsoft C# compiler csc.exe and
allows you to compile C# programs easily.

Targets
=======
* :code:`clean` - Cleans the build by deleting the bin directory and all its contents.
* :code:`compile` - Compiles the executable program from its sources in the source directory.
* :code:`run` - Runs the target executable. This target has no dependencies, so the program needs to be built first.

Default configuration
=====================
.. code-block:: python

   CSC    = r'C:\Program Files (x86)\MSBuild\14.0\Bin\csc.exe'
   DOTNET = r'C:\Windows\Microsoft.NET\Framework64\v4.0.30319'

   {
       # Specifies where to store the binary files outputted by the compiler.
       'bindir': 'bin',

       # Flags and options to pass to the compiler.
       'flags': [ '/nologo' ],

       # Libraries used by your C# program.  These will not be copied by csc
       # automatically, so if you have libraries that need to be deployed with your
       # executable file, you should add a target that copies the files to the
       # configured binary directory.
       'libs': [],

       # A list of paths to directories to look in for referenced libraries.
       'libdirs': [ DOTNET, os.path.join(DOTNET, 'WPF') ],

       # Name of the executable file generated by the compiler.
       'name': 'Program.exe',

       # Directory to look in for source files.
       'srcdir': 'src'
   }

Example
=======
.. code-block:: python

   import os, sys
   sys.path.insert(0, os.path.join('build', 'pymake2'))

   from pymake2 import *
   from pymake2.template.util import csc

   pymake2()
